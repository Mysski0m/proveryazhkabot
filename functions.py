from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, Update
from telegram.ext import CallbackContext
from questions import ege_questions, oge_questions
from main import MY_CHAT_ID

# MY_CHAT_ID =   # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ

List_Of_Students_Answers = {}

List_Of_Students_Statistics = {}

# User_Bank = 0

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def start(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    #     return
    if update.message.chat_id not in List_Of_Students_Statistics:
        List_Of_Students_Statistics[update.message.chat_id] = 0
    keyboard = [
        ['–¶–µ–ª–∏', '–ë–∞–Ω–∫'],
        ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É'],
        ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–ª–µ–π
def target_menu(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    #     return

    context.user_data['current_menu'] = "–¶–µ–ª–∏"
    context.user_data['awaiting_contact_message'] = False
    keyboard = [
        ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–¶–µ–ª–∏:', reply_markup=reply_markup)
    update.message.reply_text('–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–ª–µ–π:\n –±–µ–±—Ä–∞\n –±–µ–±—Ä–∞', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def support_menu(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ")
    #     return

    context.user_data['current_menu'] = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    context.user_data['awaiting_contact_message'] = False
    keyboard = [
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–ü–æ–¥–¥–µ—Ä–∂–∫–∞:', reply_markup=reply_markup)

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ")
    #     return

    context.user_data['awaiting_contact_message'] = False
    start(update, context)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def send_test(update: Update, context: CallbackContext) -> None:
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    #     return

    current_menu = context.user_data.get('current_menu')
    if not current_menu:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –û–ì–≠ –∏–ª–∏ –ï–ì–≠')
        return

    questions = oge_questions if current_menu == '–û–ì–≠' else ege_questions

    try:
        task_number = int(update.message.text.replace("‚Ññ", ""))
    except ValueError:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")
        return

    test_set = questions.get(task_number)
    if not test_set:
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")
        return

    context.user_data['test_set'] = test_set
    context.user_data['test_question'] = None
    context.user_data['selected_options'] = set()

    if test_set["type"] == "input_task":
        context.user_data['input_question_active'] = True
        context.user_data['input_question'] = test_set
        context.bot.send_message(chat_id=update.effective_chat.id, text=test_set["question"], parse_mode='Markdown')

    elif test_set["type"] == "multichoice_task":
        keyboard = [[InlineKeyboardButton("‚ûñ " + opt, callback_data=f"{i}:False")] for i, opt in enumerate(test_set ['options'])]
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="submit")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data["multichoice_question_active"] = True
        context.user_data["multichoice_question"] = test_set
        context.bot.send_message(chat_id=update.effective_chat.id, text=test_set["question"], reply_markup=reply_markup, parse_mode='Markdown')

    elif test_set["type"] == "text_task":
        context.user_data['text_question_active'] = True
        context.user_data['text_question'] = test_set
        if 'image' in test_set:
            context.bot.send_photo(chat_id=update.effective_chat.id, photo=test_set['image'])
        context.bot.send_message(chat_id=update.effective_chat.id, text=test_set["question"], parse_mode='Markdown')

    else:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞
def check_input(update: Update, context: CallbackContext) -> None:
    answer = update.message.text
    question = context.user_data.pop('input_question', None) or context.user_data.pop('text_question', None)
    if not question:
        return

    if update.message.chat_id not in List_Of_Students_Statistics:
        List_Of_Students_Statistics[update.message.chat_id] = [0, 0]
    List_Of_Students_Statistics[update.message.chat_id][1] += 1
    correct_answer = question['answer'].strip().lower()
    user_answer = answer.strip().lower()
    if user_answer == correct_answer:
        response = '‚úÖ*–í–µ—Ä–Ω–æ!*‚úÖ'
        response += f"\n\n‚úç–¢–≤–æ–π –æ—Ç–≤–µ—Ç:\n\n{answer}"
        List_Of_Students_Statistics[update.message.chat_id][0] += 1
    else:
        response = '‚ùå*–ù–µ–≤–µ—Ä–Ω–æ.*‚ùå'
        response += f"\n\n‚úç–¢–≤–æ–π –æ—Ç–≤–µ—Ç:\n\n{answer}"

    response_message = (
        f"{question['question']}\n\n{response}\n\nüü¢*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç*:üü¢\n\n{question['answer']}"
    )

    if 'comment' in question:
        response_message += f"\n\n{question['comment']}"

    context.user_data.pop('input_question_active', None)
    context.user_data.pop('text_question_active', None)

    context.bot.send_message(chat_id=update.effective_chat.id, text=response_message, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
def test_answer(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    data = query.data

    if update.effective_chat.id not in List_Of_Students_Statistics:
        List_Of_Students_Statistics[update.effective_user.id] = [0, 0]

    if data == "submit":
        selected_options = context.user_data.get("selected_options", set())
        question = context.user_data.get("multichoice_question")

        if question is None:
            query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        if len(selected_options) == 0:
            query.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!", show_alert=True)
            return

        correct_answers = set(question["correct"])

        if selected_options == correct_answers:
            response_message = (
                f"{question['question']}\n\n‚úÖ*–ü—Ä–∞–≤–∏–ª—å–Ω–æ!‚úÖ –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã*:\n\n" +
                "\n".join(question['options'][i] for i in selected_options)
            )
            List_Of_Students_Statistics[update.effective_user.id][0] += 1
            List_Of_Students_Statistics[update.effective_user.id][1] += 1
        else:
            correct_answers_text = "\n".join(question["options"][i] for i in correct_answers)
            selected_answers_text = "\n".join(question["options"][i] for i in selected_options)

            response_message = (
                f"{question['question']}\n\n‚ùå*–ù–µ–≤–µ—Ä–Ω–æ.‚ùå –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã:*\n\n{selected_answers_text}\n\n\nüü¢*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã*:üü¢\n\n{correct_answers_text}"
            )
            List_Of_Students_Statistics[update.effective_user.id][1] += 1

        if 'comment' in question and question['comment']:
            response_message += f"\n\n{question['comment']}"

        query.edit_message_text(text=response_message, parse_mode='Markdown')

        context.user_data.pop("multichoice_question", None)
        context.user_data.pop("selected_options", None)
        context.user_data.pop("multichoice_question_active", None)
        return

    answer_index = int(data.split(":")[0])
    selected = data.split(":")[1] == "True"

    question = context.user_data.get("multichoice_question")
    selected_options = context.user_data.get("selected_options")

    if question is None or selected_options is None:
        query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if selected:
        selected_options.discard(answer_index)
    else:
        selected_options.add(answer_index)

    keyboard = [
        [
            InlineKeyboardButton(
                ("‚úÖ " if i in selected_options else "‚ûñ") + opt,
                callback_data=f"{i}:{i in selected_options}",
            )
        ]
        for i, opt in enumerate(question["options"])
    ]

    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="submit")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_reply_markup(reply_markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Contact to support
def contact_to_support(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    #     return
    if str(update.message.chat_id) == str(MY_CHAT_ID):
        contact_support(update, context)
    else:
        context.user_data['current_menu'] = None
        context.user_data['awaiting_contact_message'] = True
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:')

# –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def contact_support(update: Update, context: CallbackContext) -> None:
    context.user_data['current_menu'] = None
    context.user_data['awaiting_contact_message'] = True
    if len(List_Of_Students_Answers) == 0:
        update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        answer_id = -1
        return
    update.message.reply_text(f'–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(List_Of_Students_Answers)}. \n –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ –∏–∑ –Ω–∏—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –ø–æ—Å—ã–ª–∫–∏.')
    list_of_answers = ""
    cnt = 1
    for key, value in List_Of_Students_Answers.items():
        list_of_answers += f'{cnt}. '
        list_of_answers += List_Of_Students_Answers[key][:20] + "..."
        list_of_answers += "\n"
        cnt += 1
    update.message.reply_text(list_of_answers)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Contact
def contact(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
    #     return
    if str(update.message.chat_id) == str(MY_CHAT_ID):
        contact_teacher(update, context)
    else:
        context.user_data['current_menu'] = None
        context.user_data['awaiting_contact_message'] = True
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:')

# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Contact –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def contact_teacher(update: Update, context: CallbackContext) -> None:
    context.user_data['current_menu'] = None
    context.user_data['awaiting_contact_message'] = True
    if len(List_Of_Students_Answers) == 0:
        update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫")
        answer_id = -1
        return
    update.message.reply_text(f'–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å—ã–ª–æ–∫: {len(List_Of_Students_Answers)}. \n –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ –∏–∑ –Ω–∏—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –ø–æ—Å—ã–ª–∫–∏.')
    list_of_answers = ""
    cnt = 1
    for key, value in List_Of_Students_Answers.items():
        list_of_answers += f'{cnt}. '
        list_of_answers += List_Of_Students_Answers[key][:20] + "..."
        list_of_answers += "\n"
        cnt += 1
    update.message.reply_text(list_of_answers)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—é
def forward_message_to_or_for_teacher(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('awaiting_contact_message', False):
        if str(update.message.chat_id) == MY_CHAT_ID:
            if update.message.text:
                user_message = update.message.text
                cnt = 1
                global answer_id
                answer_id = -1
                for key, value in List_Of_Students_Answers.items():
                    if cnt == int(user_message):
                        answer_id = key
                        break
                    cnt += 1
                update.message.reply_text(f'–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: \n\n{List_Of_Students_Answers[answer_id]}')
                update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ—Ç–≤–µ—Ç–∞")
                context.user_data['awaiting_teacher_answer'] = True

            context.user_data['awaiting_contact_message'] = False
        else:
            if update.message.text:
                user_message = update.message.text
                context.bot.send_message(
                    chat_id=MY_CHAT_ID,
                    text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message[:20]}..."
                )
                List_Of_Students_Answers[update.message.chat_id] = user_message
                update.message.reply_text('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.')
            elif update.message.photo:
                photo_file_id = update.message.photo[-1].file_id
                photo_caption = update.message.caption if update.message.caption else ""
                context.bot.send_photo(
                    chat_id=MY_CHAT_ID,
                    photo=photo_file_id,
                    caption=f"–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ: {photo_caption}"
                )
                List_Of_Students_Answers[update.message.chat_id] = "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
                update.message.reply_text('–í–∞—à–µ —Ñ–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.')

            context.user_data['awaiting_contact_message'] = False
    else:
        if context.user_data.get("input_question_active"):
            check_input(update, context)
        elif context.user_data.get("awaiting_teacher_answer", False):
            message_for_student(update, context)
        elif context.user_data.get("text_question_active"):
            check_input(update, context)
        elif context.user_data.get("multichoice_question_active"):
            check_input(update, context)
        elif context.user_data.get("current_menu") in ["–û–ì–≠", "–ï–ì–≠"]:
            send_test(update, context)
        else:
            update.message.reply_text(
                "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞."
            )

# –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É –Ω–∞ –µ–≥–æ –ø–æ—Å—ã–ª–∫—É
def message_for_student(update: Update, context: CallbackContext) -> None:

    if update.message.text:
        user_message = update.message.text
        context.bot.send_message(
            chat_id=answer_id,
            text=f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n {user_message}"
        )
    elif update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        photo_caption = update.message.caption if update.message.caption else ""
        context.bot.send_photo(
            chat_id=answer_id,
            photo=photo_file_id,
            caption=f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n {photo_caption}"
        )

    List_Of_Students_Answers.pop(answer_id)
    update.message.reply_text('–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_bank(update: Update, context: CallbackContext) -> None:

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    # if context.user_data.get('input_question_active') or context.user_data.get('text_question_active') or context.user_data.get('multichoice_question_active'):
    #     update.message.reply_text("–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ")
    #     return

    if len(List_Of_Students_Statistics) != 0:
        if List_Of_Students_Statistics[update.message.chat_id][1] != 0:
            update.message.reply_text(f'–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {List_Of_Students_Statistics[update.message.chat_id][0]}\n'
                                      f'–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {List_Of_Students_Statistics[update.message.chat_id][1]}\n'
                                      f'–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {round(List_Of_Students_Statistics[update.message.chat_id][0] / List_Of_Students_Statistics[update.message.chat_id][1] * 100, 2)}%')
        else:
            update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
    else:
        update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
    context.user_data['awaiting_contact_message'] = False
    start(update, context)
